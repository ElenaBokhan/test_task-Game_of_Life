{"version":3,"sources":["background.jpg","App.js","index.js"],"names":["App","props","start","setState","timerId","setInterval","field","getNewField","str","exportToConsole","compareState","pause","clearTimeout","state","getLiveNeighbours","x","y","filter","col","row","i","height","j","width","console","log","repeat","strState","gameOver","init","cells","getLivingCells","renderField","initial","count","includes","push","arr","Set","amountLivingCell","percentLivingCell","size","number","Math","floor","random","add","livingCells","Array","from","setHeight","e","target","value","setWidth","setAmount","parseInt","undefined","currentField","this","neighbors","length","style","backgroundImage","backUrl","className","onClick","flat","map","item","index","data-num","onChange","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eeaae266.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.fbb7999e.jpg\";","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport backUrl from './background.jpg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\twidth: \"\",\r\n\t\t\theight: \"\",\r\n\t\t\tpercentLivingCell: \"\",\t\t\t\r\n\t\t\ttimerId: undefined,\r\n\t\t\tinitial: false,\r\n\t\t\tfield: [],\r\n\t\t\tgameOver: false,\r\n\t\t\tstrState:\"\"\r\n\t\t}\r\n\t}\r\n\t\r\n\tstart = () => {\r\n\t\tthis.setState({\r\n\t\t\ttimerId: setInterval(() => {\t\t\t\t\r\n\t\t\t\tthis.setState({ field: this.getNewField() });\r\n\t\t\t\tconst str = this.exportToConsole();\r\n\t\t\t\tthis.compareState(str);\r\n\t\t\t}, 1000)\r\n\t\t})\r\n\t}\r\n\tpause = () => {\r\n\t\tclearTimeout(this.state.timerId);\r\n\t}\r\n\tgetNewField() {\r\n\t\tconst currentField = [];\r\n\t\tfor(let i=0; i<this.state.height; i++){\t\r\n\t\t\tcurrentField[i]=[];\t\t\r\n\t\t\tfor(let j=0; j<this.state.width; j++){\r\n\t\t\t\tconst neighbors = this.getLiveNeighbours(j,i);\r\n\r\n\t\t\t\tif ((this.state.field[i][j] === 1 && (neighbors.length === 2 || neighbors.length === 3)) || \r\n\t\t\t\t\t(this.state.field[i][j] === 0 && neighbors.length === 3)) {\r\n\t\t\t\t\t\tcurrentField[i].push(1);\r\n\t\t\t\t} else  currentField[i].push(0);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\treturn \tcurrentField;\r\n\t}\r\n\tgetLiveNeighbours = (x, y) => {\t\r\n\t\tconst possibleNeighbors = [[x-1,y],[x+1,y],\r\n\t\t\t\t\t\t\t\t [x,y-1],[x,y+1],\r\n\t\t\t\t\t\t\t\t [x-1,y-1],[x+1,y-1],\r\n\t\t\t\t\t\t\t\t [x-1,y+1],[x+1,y+1]];\r\n\t \tconst liveNeighbors = possibleNeighbors.filter( ([col, row]) => this.state.field?.[row]?.[col] === 1);\r\n\t \treturn liveNeighbors;\t\t\r\n\t}\r\n\texportToConsole = () => {\r\n\t\tlet str = \"\";\r\n\t\tfor(let i=0; i<this.state.height;i++){\r\n\t\t\tfor(let j=0; j<this.state.width;j++){\r\n\t\t\t\tif (j===0) str+=\"|\";\r\n\t\t\t\tthis.state.field[i][j] === 1 ? str+=\"x|\" : str+=\"-|\";\r\n\t\t\t\tif (j===this.state.width-1) str+=\"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(str);\r\n\t\tconsole.log(\"=\".repeat(this.state.width*2+1));\r\n\t\treturn str;\r\n\t\t\r\n\t}\r\n\tcompareState = (str) => {\r\n\t\tif(str === this.state.strState) {\r\n\t\t\tthis.setState({ gameOver: true })\r\n\t\t\tclearTimeout(this.state.timerId);\r\n\t\t} else {\r\n\t\t\tthis.setState({ strState: str })\r\n\t\t}\r\n\t}\r\n\tinit = () => {\t\t\r\n\t\tconst cells = this.getLivingCells();\r\n\t\tthis.renderField(cells);\r\n\t\tthis.setState({ initial: true });\t\r\n\t}\r\n\trenderField = (cells) => {\r\n\t\tconst field = [];\r\n\t\tlet count = 0;\r\n\r\n\t\tfor(let i=0; i<this.state.height; i++){\r\n\t\t\tfield[i]=[];\r\n\t\t\tfor(let j=0; j<this.state.width; j++){\r\n\t\t\t\tcells.includes(count) ? field[i].push(1) : field[i].push(0);\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({ field: field});\r\n\t};\t\r\n\tgetLivingCells = () => {\r\n\t\tconst arr = new Set();\r\n\t\tconst amountLivingCell = this.state.width*this.state.height*this.state.percentLivingCell/100;\r\n\t\twhile (arr.size < amountLivingCell) {\r\n\t\t\tlet number = Math.floor(Math.random() * this.state.width*this.state.height + 1);\r\n\t\t\tarr.add(number);\r\n\t\t}\r\n\t\tthis.setState({ livingCells: Array.from(arr) });\r\n\t\treturn Array.from(arr);\r\n\t}\r\n\tsetHeight = (e) => {\r\n\t\tthis.setState({ height: e.target.value });\t\r\n\t}\r\n\tsetWidth = (e) => {\r\n\t\tthis.setState({ width: e.target.value });\t\r\n\t}\r\n\tsetAmount = (e) => {\t\t\r\n\t\tthis.setState({ percentLivingCell: parseInt(e.target.value) });\t\r\n\t}\r\n\trender() {\r\n\t\treturn  <div style={{ backgroundImage: `url(${backUrl})` }} className=\"back\">\r\n\t\t\t\t\t<div className=\"field-wrap\">\r\n\t\t\t\t\t\t<h1>Game of Life</h1>\r\n\t\t\t\t\t\t<h3>test task</h3>\r\n\t\t\t\t\t\t{!this.state.initial \r\n\t\t\t\t\t\t? <div className=\"init-size-field\">\r\n\t\t\t\t\t\t\t\t<span>Введите размер ширины поля</span>\r\n\t\t\t\t\t\t\t\t<input onChange = {this.setWidth} \r\n\t\t\t\t\t\t\t\t\t   value = {this.state.width}/>\r\n\t\t\t\t\t\t\t\t<span>Введите размер высоты поля</span>\r\n\t\t\t\t\t\t\t\t<input onChange = {this.setHeight} \r\n\t\t\t\t\t\t\t\t \t   value = {this.state.height}/>\r\n\t\t\t\t\t\t\t\t<span>Введите колличество живых клеток(%)</span>\r\n\t\t\t\t\t\t\t\t<input onChange = {this.setAmount} \r\n\t\t\t\t\t\t\t\t\t   value = {this.state.amountLivingCell}/>\r\n\t\t\t\t\t\t\t\t<button onClick = {this.init}>OK</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t: <>\r\n\t\t\t\t\t\t\t<div className=\"buttons-wrap\">\r\n\t\t\t\t\t\t\t\t<button onClick = {this.start}>Start</button>\r\n\t\t\t\t\t\t\t\t<button onClick = {this.pause}>Pause</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"field\" \r\n\t\t\t\t\t\t\t\t style={{ width: `${this.state.width * 40}px`, \r\n\t\t\t\t\t\t\t\t\t\theight: `${this.state.height * 40}px` }}>\r\n\t\t\t\t\t\t\t\t{this.state.field.flat(1).map((item, index) => {\r\n\t\t\t\t\t\t\t\t\treturn <div className={item===1 ? \"alive\" : \"dead\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdata-num={item}\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={index}>\r\n\t\t\t\t\t\t\t\t\t\t   </div>\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t  </>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{this.state.gameOver && <span className = {\"game-over\"}>The End!</span>}\r\n\t\t\t\t\t</div>\t\t\t\t\t\r\n\t\t\t\t</div>\t\t\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}